# generated by datamodel-codegen:
#   filename:  trades_api.yaml
#   timestamp: 2024-04-19T22:12:00+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Optional

from pydantic import BaseModel, Field, constr


class Trade(BaseModel):
    id: str = Field(
        ...,
        description='Unique id of the trade as defined by the exchange',
        example='trade_123',
    )
    price: int = Field(..., description='Price in eurocent/MWh.', example=200)
    quantity: int = Field(..., description='Quantity in MW.', example=12)
    direction: str = Field(
        ...,
        pattern=r'^(buy|sell)$',
        description='Direction of the trade from the perspective of flew-power, can be either buy or sell.',
    )
    delivery_day: date = Field(
        ..., description='Day on which the energy has to be delivered in local time.'
    )
    delivery_hour: int = Field(
        ...,
        description='Hour during which the energy has to be delivered in local time.',
        example=14,
    )
    trader_id: str = Field(
        ..., description='Unique id of a trader (bot or team member).', example='MirkoT'
    )
    execution_time: datetime = Field(
        ..., description='UTC datetime at which the trade occured on the exchange.'
    )


class Error(BaseModel):
    status_code: Optional[int] = None
    message: Optional[str] = Field(None, description='Descriptive error message')
